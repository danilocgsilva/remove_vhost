#!/bin/bash

##
### Function definitions
#

##
# Functions that provides informations for the missing variables
#
removevhost_provides_variables_information() {
    echo This utility MUST have two environment setted variables:
    echo \$vhost_path: The path where the \"httpd-vhosts.conf\" file are located.
    echo \$hosts_path: The path where the \"hosts\" file are located.
    echo You can use the \"export\" feature in the user configuration \(usually the .bash_profile located in the user root\) to set the variables.
}


##
### Tasks
#

##
# Set the file names, expected to be found in the paths
#
vhost_filename=httpd-vhosts.conf
hosts_filename=hosts


##
# 1. from planning
# Check for $vhost_path variable and $hosts_path variables
#
if [ -z $vhost_path ]; then
    removevhost_provides_variables_information
    exit
fi
if [ -z $hosts_path ]; then
    removevhost_provides_variables_information
    exit
fi


##
# 2. From planing
# Check if the variables setted directory exists
#
if [ ! -d $vhost_path ]; then
    echo The setted directory in the \$vhost_path variable does not exists.
    echo Please, change it for a valid location.
    exit
fi
if [ ! -d $hosts_path ]; then
    echo The setted directory in the \$hosts_path variable does not exists.
    echo Please, change it for a valid location.
    exit
fi


##
# 3. from planning
# Check if the files from virtual hosts exists in their locations
#
if [ -f $hosts_path/$hosts_filename ]; then
    echo There\'s no hosts file in the hosts path.
    echo Check if the $hosts_path/$hosts_filename file exists.
    exit
fi
if [ -f $vhost_path/$vhost_filename ]; then
    echo There\'s no virtual host file in the virtual host path.
    echo Check if the $vhost_path/$vhost_filename file exists.
    exit
fi


##
# 4. from planning
# Check for permissions to write in the files
#
if [ ! -w $hosts_path/$hosts_filename ]; then
    echo The user does not have permission to write in $hosts_path/$hosts_filename.
    echo Execute with a higher permissioned user \(you may also have to ajusts the variables setted to this user\).
    exit
fi
if [ ! -w $vhost_path/$vhost_filename ]; then
    echo The user does not have permission to write in $vhost_path/$vhost_filename.
    echo Execute with a higher permissioned user \(you may also have to ajusts the variables setted to this user\).
    exit
fi


##
# 5. from planning
# Check if the first argument was provided
#
if [ -z $1 ]; then
    echo You must provides the first argument to be the virtualhost name.
    exit  
fi


